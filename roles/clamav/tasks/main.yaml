---
- name: Include OS-Specific variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yaml"

- name: Include setup variables
  ansible.builtin.include_tasks: setup-vars.yaml

- name: Ensure ClamAV packages are installed.
  ansible.builtin.package:
    name: "{{ __clamav__ }}"
    state: present
  loop: "{{ clamav_packages }}"
  loop_control:
    loop_var: __clamav__
  register: clamav_packages_install

- name: Run freshclam after ClamAV packages change.
  ansible.builtin.command: freshclam
  when: clamav_packages_install.changed
  register: freshclam_result
  notify: Restart clamav daemon
  # On Debian, freshclam is automatically run post-install, so this may fail.
  failed_when:
    - freshclam_result is failed
    - freshclam_result.stderr.find('locked by another process') != -1
  tags: ["skip_ansible_lint"]

- name: Include RHEL-specific setup tasks
  ansible.builtin.include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- name: Change configuration for the ClamAV daemon.
  ansible.builtin.lineinfile:
    path: "{{ clamav_daemon_config_path }}"
    regexp: "{{ __clamav__.regexp }}"
    line: "{{ __clamav__.line | default('') }}"
    state: "{{ __clamav__.state | default('present') }}"
    mode: 0644
    create: yes
  loop: "{{ clamav_daemon_configuration_changes }}"
  loop_control:
    loop_var: __clamav__

- name: Change configuration for the freshclam daemon.
  ansible.builtin.lineinfile:
    path: "{{ clamav_freshclam_daemon_config_path }}"
    regexp: "{{ __clamav__.regexp }}"
    line: "{{ __clamav__.line | default('') }}"
    state: "{{ __clamav__.state | default('present') }}"
  loop: "{{ clamav_freshclam_configuration_changes }}"
  loop_control:
    loop_var: __clamav__
  when: clamav_freshclam_configuration_changes is defined

- name: Overridng systemd configuration for ClamAV
  ansible.builtin.template:
    src: extend.conf.j2
    dest: /etc/systemd/system/clamav-daemon.service.d/extend.conf
    owner: root
    group: root
    mode: 0644

- name: Ensure ClamAV daemon is running (if configured).
  ansible.builtin.service:
    name: "{{ clamav_daemon }}"
    state: "{{ clamav_daemon_state }}"
    enabled: "{{ clamav_daemon_enabled }}"
  when: not ansible_check_mode

- name: Ensure ClamAV freshclam daemon is running (if configured).
  ansible.builtin.service:
    name: "{{ clamav_freshclam_daemon }}"
    state: "{{ clamav_freshclam_daemon_state }}"
    enabled: "{{ clamav_freshclam_daemon_enabled }}"
  when: not ansible_check_mode
